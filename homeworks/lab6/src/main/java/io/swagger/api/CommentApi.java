/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.68).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Comment;
import io.swagger.model.CommentRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-03-25T14:57:37.893068418Z[GMT]")
@Validated
public interface CommentApi {

    @Operation(summary = "Add a new comment to the store.", description = "Add a new comment to the store.", tags={ "comment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "422", description = "Validation exception") })
    @RequestMapping(value = "/comment",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<Comment> addComment(@Parameter(in = ParameterIn.DEFAULT, description = "Create a new comment in the store", required=true, schema=@Schema()) @Valid @RequestBody CommentRequest body
);


    @Operation(summary = "Deletes a comment.", description = "Delete a comment.", tags={ "comment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Comment deleted"),
        
        @ApiResponse(responseCode = "400", description = "Invalid comment value") })
    @RequestMapping(value = "/comment/{commentId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteComment(@Parameter(in = ParameterIn.PATH, description = "Comment id to delete", required=true, schema=@Schema()) @PathVariable("commentId") Long commentId
);


    @Operation(summary = "Find all comments.", description = "Returns all comments.", tags={ "comment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid"),
        
        @ApiResponse(responseCode = "404", description = "Comment not found") })
    @RequestMapping(value = "/comment",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Comment> getAllComments();


    @Operation(summary = "Find pet by ID.", description = "Returns a single comment.", tags={ "comment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid"),
        
        @ApiResponse(responseCode = "404", description = "Comment not found") })
    @RequestMapping(value = "/comment/{commentId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Comment> getCommentById(@Parameter(in = ParameterIn.PATH, description = "ID of pet to return", required=true, schema=@Schema()) @PathVariable("commentId") Long commentId
);


    @Operation(summary = "Update an existing comment.", description = "Update an existing comment by Id.", tags={ "comment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Comment not found"),
        
        @ApiResponse(responseCode = "422", description = "Validation exception") })
    @RequestMapping(value = "/comment",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Comment> updateComment(@Parameter(in = ParameterIn.DEFAULT, description = "Update an existent comment in the store", required=true, schema=@Schema()) @Valid @RequestBody Comment body
);

}

